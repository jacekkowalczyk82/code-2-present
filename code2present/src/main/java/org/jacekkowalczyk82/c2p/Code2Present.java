/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.jacekkowalczyk82.c2p;

import org.apache.poi.sl.usermodel.Placeholder;
import org.apache.poi.xslf.usermodel.*;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;



public class Code2Present {

    private XMLSlideShow p;
    private XSLFSlide titleSlide;
    private XSLFSlideMaster defaultMaster;
    private XSLFSlideLayout titleLayout;
    private XSLFSlideLayout layout;


    public void fromTemplate(String templateFileName) {
        try {
            p = new XMLSlideShow(
                    new FileInputStream(templateFileName));

            defaultMaster = p.getSlideMasters().get(0);

            System.out.println("Available slide layouts:");
            for(XSLFSlideMaster master : p.getSlideMasters()){
                for(XSLFSlideLayout layout : master.getSlideLayouts()){
                    System.out.println("    "+ layout.getType());
                }
            }


        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }


    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        Code2Present c2p = new Code2Present();
        System.out.println(c2p.getGreeting());

        //code-2-present-template1.pptx
        c2p.fromTemplate("TemplateMeshWithFooter.pptx");
        // c2p.fromTemplate("TemplateMesh.pptx");
        // c2p.fromTemplate("TemplateCelestial.pptx");
        // c2p.fromTemplate("TemplateMeshWithFooter.pptx");
        // c2p.fromTemplate("TemplateMeshWithFooter.pptx");


        c2p.title("This is Title", "Subtitle Author date");
        
        c2p.emptySlide();

        c2p.slide("slide 2", Content.withText("this is a paragraph text on the slide 2"));
        
       c2p.slide("slide 3", Content.withUlList(
               "Elem 1",
               "Elem 2", "Elemment 3 ")
       );

//        c2p.slide("slide 3",Content.withImage("images/image1.png"));


        try {
            c2p.save("example-presentation.pptx");
        } catch (IOException e) {
            throw new RuntimeException(e);
        }


    }

    public void copyPlaceHoldersFromTemplate(XSLFSlide titleSlide, XSLFSlide slide) {  
  
        List<XSLFShape> titleSlideShapes = titleSlide.getShapes();  
        for (XSLFShape shape : titleSlideShapes) {  
            Placeholder ph = shape.getPlaceholder();  
  
                System.out.println("Copying from " + shape.getShapeName() + " " + shape.getPlaceholder());  
//                ((XSLFTextShape) shape).setText("Test Text");  
  
                if (ph == null) {  
                    continue;  
                }  
  
                switch (ph) {  
                // these are special and not copied by default  
                    case DATETIME:  
                    case SLIDE_NUMBER:
                    case CONTENT:  
                    case FOOTER:  
                        System.out.println("Copying placeholder : "+ ph);  
                        slide.getXmlObject().getCSld().getSpTree().addNewSp().set(shape.getXmlObject().copy());  
                        break; 
                    
                    default:  
                        //slide.getSpTree().addNewSp().set(tsh.getXmlObject().copy());  
                        // System.out.println("Copying placeholder : "+ ph);  
                        // slide.getXmlObject().getCSld().getSpTree().addNewSp().set(shape.getXmlObject().copy());  

                
                }  
        }
    }

    public void save(String presentationFileName) throws IOException {

        FileOutputStream out = null;
        try {
            System.out.println("Saving presentation to: " + presentationFileName);
            out = new FileOutputStream(presentationFileName);
            p.write(out);

        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        } catch (IOException e) {
            throw new RuntimeException(e);
        } finally {
            out.close();
        }


    }

    public void emptySlide() {
        if (layout == null) {
            layout
                    = defaultMaster.getLayout(SlideLayout.TITLE_AND_CONTENT);
        }

        XSLFSlide slide = p.createSlide(layout);

        copyPlaceHoldersFromTemplate(this.titleSlide, slide);

        XSLFTextShape[] placeholders = slide.getPlaceholders();
        // System.out.println("New Slide placeholders before: ");
        // for (XSLFTextShape placeHold : placeholders) {
        //     System.out.println("    " + placeHold.getShapeId() + " " + placeHold.getShapeName() + " - " + placeHold.getText());  
        //     System.out.println("    ");
        // }
        
        // XSLFTextShape titleShape = slide.getPlaceholder(0);
        // XSLFTextShape contentShape = slide.getPlaceholder(1);

        // titleShape.setText("");
        // contentShape.clearText();

        for (XSLFTextShape placeHold : placeholders) {
            slide.removeShape(placeHold);

        }


        // switch (content.getContentType()) {
        //     case IMAGE: 
        //         addText(contentShape, content.getText());
        //         break; 
        //     case UL_LIST:
        //         addUlList(contentShape, content.getUlList());
            
        // }
        
        // //this is just very beginning version with only text
        // // contentShape.setText();

        // System.out.println("Slide placeholders after: ");
        // for (XSLFTextShape placeHold : placeholders) {
        //     System.out.println("    " + placeHold.getShapeId() + " " + placeHold.getShapeName() + " - " + placeHold.getText());  
        // }
        
    }


    public void slide(String slideTitle, Content content) {
        if (layout == null) {
            layout
                    = defaultMaster.getLayout(SlideLayout.TITLE_AND_CONTENT);
        }

        XSLFSlide slide = p.createSlide(layout);

        copyPlaceHoldersFromTemplate(this.titleSlide, slide);

        XSLFTextShape[] placeholders = slide.getPlaceholders();
        System.out.println("New Slide placeholders before: ");
        for (XSLFTextShape placeHold : placeholders) {
            System.out.println("    " + placeHold.getShapeId() + " " + placeHold.getShapeName() + " - " + placeHold.getText());  
            System.out.println("    ");
        }


        for (XSLFShape shape : slide.getShapes()) {
            if (shape instanceof XSLFAutoShape) {
                // this is a template placeholder
                System.out.println("    AUTO Shape: " + shape.getShapeId() + " " + shape.getShapeName()); 
            }
        }

        
        XSLFTextShape titleShape = slide.getPlaceholder(0);
        XSLFTextShape contentShape = slide.getPlaceholder(1);

        titleShape.setText(slideTitle);

        switch (content.getContentType()) {
            case CODE: 
                addCodeText(contentShape, content.getText());
                break; 
            case TEXT: 
                addText(contentShape, content.getText());
                break; 
            case UL_LIST:
                addUlList(contentShape, content.getUlList());
            
        }
        
        //this is just very beginning version with only text
        // contentShape.setText();

        System.out.println("Slide placeholders after: ");
        for (XSLFTextShape placeHold : placeholders) {
            System.out.println("    " + placeHold.getShapeId() + " " + placeHold.getShapeName() + " - " + placeHold.getText());  
        }
        
    }


    private void addUlList(XSLFTextShape contentShape, List<String> ulList) {
        contentShape.clearText();

        
        ulList.forEach(item -> {
            XSLFTextParagraph p1 = contentShape.addNewTextParagraph();
        
            p1.setIndentLevel(0);
            p1.setBullet(true);

            XSLFTextRun r1 = p1.addNewTextRun();
            r1.setText(item);
        });
        
    }


    private void addText(XSLFTextShape contentShape, String text) {
        System.out.println("Old shape     " + contentShape.getShapeId() + " " + contentShape.getShapeName() + " - " + contentShape.getText()); 
        
        contentShape.clearText();
        contentShape.setText(text);

        System.out.println("New shape TEXT    " + contentShape.getShapeId() + " " + contentShape.getShapeName() + " - " + contentShape.getText()); 
        

    }

    private void addCodeText(XSLFTextShape contentShape, String code) {
        contentShape.clearText();
        // contentShape.setText("hmmmm ");
        contentShape.getTextParagraphs().forEach(tp-> {
            System.out.println("Empty Text Paragrapth "+ tp.getText());
        });
        System.out.println("Paragraphs size: "+ contentShape.getTextParagraphs().size());
        XSLFTextParagraph p = contentShape.addNewTextParagraph();
        p.setBullet(false);

        XSLFTextRun r1 = p.addNewTextRun();

        r1.setText(code);

        r1.setFontColor(java.awt.Color.GRAY);
   

    }

    public void macOsSlide(String slideTitle, Content content) {
        if (layout == null) {
            layout
                    = defaultMaster.getLayout(SlideLayout.TEXT);
        }

        XSLFSlide slide = p.createSlide(layout);
        XSLFTextShape titleShape = slide.getPlaceholder(0);
        XSLFTextShape contentShape = slide.getPlaceholder(1);

        titleShape.setText(slideTitle);
        //this is just very beginning version with only text
        contentShape.setText(content.getText());

        copyPlaceHoldersFromTemplate(this.titleSlide, slide);

    }

    public void title(String thisIsTitle, String subtitleAuthorDate) {
        if (titleLayout == null) {
            titleLayout
                    = defaultMaster.getLayout(SlideLayout.TITLE);
        }

        titleSlide = p.getSlides().get(0);
//        XSLFSlide titleSlide = p.createSlide(titleLayout);

        XSLFTextShape[] placeholders = titleSlide.getPlaceholders();
        System.out.println("Title Slide placeholders before: ");
        for (XSLFTextShape placeHold : placeholders) {
            System.out.println("    " + placeHold.getShapeId() + " " + placeHold.getShapeName() + " - " + placeHold.getText());  
            System.out.println("    ");
        }


        XSLFTextShape titleShape = titleSlide.getPlaceholder(0);
        XSLFTextShape subTitleShape = titleSlide.getPlaceholder(1);

        titleShape.setText(thisIsTitle);
        subTitleShape.setText(subtitleAuthorDate);


    }
}
